// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MenchasticServiceClient is the client API for MenchasticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenchasticServiceClient interface {
	CreateRoom(ctx context.Context, in *RequestCreateRoom, opts ...grpc.CallOption) (MenchasticService_CreateRoomClient, error)
	ListRoom(ctx context.Context, in *RequestGame, opts ...grpc.CallOption) (*Rooms, error)
	JoinRoom(ctx context.Context, in *RequestJoinRoom, opts ...grpc.CallOption) (MenchasticService_JoinRoomClient, error)
}

type menchasticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenchasticServiceClient(cc grpc.ClientConnInterface) MenchasticServiceClient {
	return &menchasticServiceClient{cc}
}

func (c *menchasticServiceClient) CreateRoom(ctx context.Context, in *RequestCreateRoom, opts ...grpc.CallOption) (MenchasticService_CreateRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &MenchasticService_ServiceDesc.Streams[0], "/v2.MenchasticService/CreateRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &menchasticServiceCreateRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MenchasticService_CreateRoomClient interface {
	Recv() (*ResponseRoom, error)
	grpc.ClientStream
}

type menchasticServiceCreateRoomClient struct {
	grpc.ClientStream
}

func (x *menchasticServiceCreateRoomClient) Recv() (*ResponseRoom, error) {
	m := new(ResponseRoom)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *menchasticServiceClient) ListRoom(ctx context.Context, in *RequestGame, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/v2.MenchasticService/ListRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menchasticServiceClient) JoinRoom(ctx context.Context, in *RequestJoinRoom, opts ...grpc.CallOption) (MenchasticService_JoinRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &MenchasticService_ServiceDesc.Streams[1], "/v2.MenchasticService/JoinRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &menchasticServiceJoinRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MenchasticService_JoinRoomClient interface {
	Recv() (*ResponseRoom, error)
	grpc.ClientStream
}

type menchasticServiceJoinRoomClient struct {
	grpc.ClientStream
}

func (x *menchasticServiceJoinRoomClient) Recv() (*ResponseRoom, error) {
	m := new(ResponseRoom)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MenchasticServiceServer is the server API for MenchasticService service.
// All implementations must embed UnimplementedMenchasticServiceServer
// for forward compatibility
type MenchasticServiceServer interface {
	CreateRoom(*RequestCreateRoom, MenchasticService_CreateRoomServer) error
	ListRoom(context.Context, *RequestGame) (*Rooms, error)
	JoinRoom(*RequestJoinRoom, MenchasticService_JoinRoomServer) error
	mustEmbedUnimplementedMenchasticServiceServer()
}

// UnimplementedMenchasticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMenchasticServiceServer struct {
}

func (UnimplementedMenchasticServiceServer) CreateRoom(*RequestCreateRoom, MenchasticService_CreateRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedMenchasticServiceServer) ListRoom(context.Context, *RequestGame) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoom not implemented")
}
func (UnimplementedMenchasticServiceServer) JoinRoom(*RequestJoinRoom, MenchasticService_JoinRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedMenchasticServiceServer) mustEmbedUnimplementedMenchasticServiceServer() {}

// UnsafeMenchasticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenchasticServiceServer will
// result in compilation errors.
type UnsafeMenchasticServiceServer interface {
	mustEmbedUnimplementedMenchasticServiceServer()
}

func RegisterMenchasticServiceServer(s grpc.ServiceRegistrar, srv MenchasticServiceServer) {
	s.RegisterService(&MenchasticService_ServiceDesc, srv)
}

func _MenchasticService_CreateRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestCreateRoom)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MenchasticServiceServer).CreateRoom(m, &menchasticServiceCreateRoomServer{stream})
}

type MenchasticService_CreateRoomServer interface {
	Send(*ResponseRoom) error
	grpc.ServerStream
}

type menchasticServiceCreateRoomServer struct {
	grpc.ServerStream
}

func (x *menchasticServiceCreateRoomServer) Send(m *ResponseRoom) error {
	return x.ServerStream.SendMsg(m)
}

func _MenchasticService_ListRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenchasticServiceServer).ListRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.MenchasticService/ListRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenchasticServiceServer).ListRoom(ctx, req.(*RequestGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenchasticService_JoinRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestJoinRoom)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MenchasticServiceServer).JoinRoom(m, &menchasticServiceJoinRoomServer{stream})
}

type MenchasticService_JoinRoomServer interface {
	Send(*ResponseRoom) error
	grpc.ServerStream
}

type menchasticServiceJoinRoomServer struct {
	grpc.ServerStream
}

func (x *menchasticServiceJoinRoomServer) Send(m *ResponseRoom) error {
	return x.ServerStream.SendMsg(m)
}

// MenchasticService_ServiceDesc is the grpc.ServiceDesc for MenchasticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenchasticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.MenchasticService",
	HandlerType: (*MenchasticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoom",
			Handler:    _MenchasticService_ListRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateRoom",
			Handler:       _MenchasticService_CreateRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinRoom",
			Handler:       _MenchasticService_JoinRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend/api/proto/v2/game.proto",
}
